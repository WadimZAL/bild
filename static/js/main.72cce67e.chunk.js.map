{"version":3,"sources":["candy-machine.ts","connection.tsx","utils.ts","MintCountdown.tsx","MintButton.tsx","NFTcounter.tsx","Home.tsx","assets/treedom.png","assets/treedom.gif","assets/leaf.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","goLiveDate","Date","getTime","endSettings","endSettingType","date","number","treasury","wallet","tokenMint","gatekeeper","whitelistMintSettings","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintMultipleToken","quantity","signersMatrix","instructionsMatrix","index","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","onSignature","result","context","e","toDate","numberFormater","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatNumber","format","val","asNumber","LAMPORTS_PER_SOL","buyer","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","fontWeight","item","MintCountdown","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","isMinting","rpcUrl","setIsMinting","useWallet","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","disabled","onClick","network","toBase58","ACTIVE","findGatewayToken","gatewayToken","isValid","endpoint","endsWith","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","variant","CircularProgress","Minus","button","Plus","NumericField","input","NFTcounter","remainingNFTs","setTotalCost","setMintCount","mintCount","setCount","updateAmounts","qty","Math","round","Grid","container","xs","numericField","document","querySelector","parseInt","isNaN","decrementValue","type","step","min","max","onChange","target","updateMintCount","incrementValue","Metadata","programs","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","Home","props","process","toString","nftsMintedByOwner","setNFTs","totalCost","setPrice","balance","setBalance","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","setItemsRemaining","isWhitelistUser","isPresale","discountPrice","loading","setLoading","rpcHost","useMemo","signTransaction","refreshCandyMachineState","useCallback","cndy","active","getBalance","amount","limit","collectNftsFromWallet","getSum","array","sum","score","analyseAttributes","attributes","traits","scores","category","nft","includes","trait_type","Object","values","getNFTs","uri","axios","get","response","rarity","image","findDataByOwner","nftsmetadata","NFTsfromCollection","filter","name","symbol","nftData","throwConfetti","confetti","particleCount","spread","origin","y","location","reload","mintMany","quantityString","Number","futureBalance","signedTransactions","promiseArray","tx","txTimeout","allTransactionsResult","totalSuccess","totalFailure","transactionStatus","retry","newBalance","startMint","msg","code","indexOf","toggleMintButton","now","Container","Backdrop","position","zIndex","maxWidth","connected","backgroundColor","Typography","marginLeft","toFixed","paddingTop","paddingBottom","textAlign","maxHeight","slidesPerView","spaceBetween","loop","pagination","clickable","navigation","modules","Pagination","Navigation","Box","src","textTransform","borderBottom","direction","wrap","align","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","getCandyMachineId","Connection","App","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","Copyright","getFullYear","ThemeProvider","sx","minHeight","flex","md","lg","aspectRatio","logo","marginTop","gif","backgroundImage","leafbg","backgroundSize","ConnectionProvider","WalletProvider","autoConnect","component","py","px","mt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.72cce67e.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\r\n\r\nimport { SystemProgram } from \"@solana/web3.js\";\r\nimport { sendTransactions } from \"./connection\";\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from \"./utils\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  // if (connection._signatureSubscriptions[subId]) {\r\n  //   connection.removeSignatureListener(subId);\r\n  // }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n};\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection\r\n): Promise<CandyMachine> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"recent\",\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive:\r\n        state.data.goLiveDate &&\r\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\r\n        (state.endSettings\r\n          ? state.endSettings.endSettingType.date\r\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\r\n            : itemsRedeemed < state.endSettings.number.toNumber()\r\n          : true),\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM\r\n  );\r\n};\r\n\r\nexport const mintMultipleToken = async (\r\n  candyMachine: CandyMachine,\r\n  payer: anchor.web3.PublicKey,\r\n  quantity: number = 2\r\n): Promise<(string | undefined)[]> => {\r\n  const signersMatrix = [];\r\n  const instructionsMatrix = [];\r\n\r\n  for (let index = 0; index < quantity; index++) {\r\n    const mint = anchor.web3.Keypair.generate();\r\n    const userTokenAccountAddress = (\r\n      await getAtaForMint(mint.publicKey, payer)\r\n    )[0];\r\n\r\n    const userPayingAccountAddress = candyMachine.state.tokenMint\r\n      ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n      : payer;\r\n\r\n    const candyMachineAddress = candyMachine.id;\r\n    const remainingAccounts = [];\r\n    const signers: anchor.web3.Keypair[] = [mint];\r\n    const cleanupInstructions = [];\r\n    const instructions = [\r\n      anchor.web3.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: mint.publicKey,\r\n        space: MintLayout.span,\r\n        lamports:\r\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n            MintLayout.span\r\n          ),\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer\r\n      ),\r\n      createAssociatedTokenAccountInstruction(\r\n        userTokenAccountAddress,\r\n        payer,\r\n        payer,\r\n        mint.publicKey\r\n      ),\r\n      Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        userTokenAccountAddress,\r\n        payer,\r\n        [],\r\n        1\r\n      ),\r\n    ];\r\n\r\n    // CIVIC\r\n    if (candyMachine.state.gatekeeper) {\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkToken(\r\n            payer,\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork\r\n          )\r\n        )[0],\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      if (candyMachine.state.gatekeeper.expireOnUse) {\r\n        remainingAccounts.push({\r\n          pubkey: CIVIC,\r\n          isWritable: false,\r\n          isSigner: false,\r\n        });\r\n        remainingAccounts.push({\r\n          pubkey: (\r\n            await getNetworkExpire(\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork\r\n            )\r\n          )[0],\r\n          isWritable: false,\r\n          isSigner: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    // WHITELIST/PRE-SALE\r\n    if (candyMachine.state.whitelistMintSettings) {\r\n      const mint = new anchor.web3.PublicKey(\r\n        candyMachine.state.whitelistMintSettings.mint\r\n      );\r\n\r\n      const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n      remainingAccounts.push({\r\n        pubkey: whitelistToken,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n\r\n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n        const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n        remainingAccounts.push({\r\n          pubkey: mint,\r\n          isWritable: true,\r\n          isSigner: false,\r\n        });\r\n        remainingAccounts.push({\r\n          pubkey: whitelistBurnAuthority.publicKey,\r\n          isWritable: false,\r\n          isSigner: true,\r\n        });\r\n        signers.push(whitelistBurnAuthority);\r\n        const exists =\r\n          await candyMachine.program.provider.connection.getAccountInfo(\r\n            whitelistToken\r\n          );\r\n        if (exists) {\r\n          instructions.push(\r\n            Token.createApproveInstruction(\r\n              TOKEN_PROGRAM_ID,\r\n              whitelistToken,\r\n              whitelistBurnAuthority.publicKey,\r\n              payer,\r\n              [],\r\n              1\r\n            )\r\n          );\r\n          cleanupInstructions.push(\r\n            Token.createRevokeInstruction(\r\n              TOKEN_PROGRAM_ID,\r\n              whitelistToken,\r\n              payer,\r\n              []\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // SPL-TOKEN TO MINT\r\n    if (candyMachine.state.tokenMint) {\r\n      const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n      signers.push(transferAuthority);\r\n      remainingAccounts.push({\r\n        pubkey: userPayingAccountAddress,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: transferAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n\r\n      instructions.push(\r\n        Token.createApproveInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          userPayingAccountAddress,\r\n          transferAuthority.publicKey,\r\n          payer,\r\n          [],\r\n          candyMachine.state.price.toNumber()\r\n        )\r\n      );\r\n      cleanupInstructions.push(\r\n        Token.createRevokeInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          userPayingAccountAddress,\r\n          payer,\r\n          []\r\n        )\r\n      );\r\n    }\r\n    const metadataAddress = await getMetadata(mint.publicKey);\r\n    const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n      candyMachineAddress\r\n    );\r\n\r\n    instructions.push(\r\n      await candyMachine.program.instruction.mintNft(creatorBump, {\r\n        accounts: {\r\n          candyMachine: candyMachineAddress,\r\n          candyMachineCreator,\r\n          payer: payer,\r\n          wallet: candyMachine.state.treasury,\r\n          mint: mint.publicKey,\r\n          metadata: metadataAddress,\r\n          masterEdition,\r\n          mintAuthority: payer,\r\n          updateAuthority: payer,\r\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n          tokenProgram: TOKEN_PROGRAM_ID,\r\n          systemProgram: SystemProgram.programId,\r\n          rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n          clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n          recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n          instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n        },\r\n        remainingAccounts:\r\n          remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n      })\r\n    );\r\n\r\n    signersMatrix.push(signers);\r\n    instructionsMatrix.push(instructions);\r\n    if (cleanupInstructions.length > 0) {\r\n      instructionsMatrix.push(cleanupInstructions);\r\n      signersMatrix.push([]);\r\n    }\r\n  }\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix\r\n      )\r\n    ).txs.map((t) => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachine,\r\n  payer: anchor.web3.PublicKey,\r\n  mint: anchor.web3.Keypair\r\n): Promise<(string | undefined)[]> => {\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const cleanupInstructions = [];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1\r\n    ),\r\n  ];\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n          whitelistToken\r\n        );\r\n      if (exists) {\r\n        instructions.push(\r\n          Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            whitelistBurnAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            1\r\n          )\r\n        );\r\n        cleanupInstructions.push(\r\n          Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            payer,\r\n            []\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        transferAuthority.publicKey,\r\n        payer,\r\n        [],\r\n        candyMachine.state.price.toNumber()\r\n      )\r\n    );\r\n    cleanupInstructions.push(\r\n      Token.createRevokeInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        payer,\r\n        []\r\n      )\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress\r\n  );\r\n\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    })\r\n  );\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions, cleanupInstructions],\r\n        [signers, []]\r\n      )\r\n    ).txs.map((t) => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from \"@solana/web3.js\";\r\n\r\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\r\nimport { any } from \"prop-types\";\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, \"max\");\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach((log) => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][]\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          \"single\"\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          \"single\"\r\n        );\r\n        ids = ids.concat(txs.map((t) => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      \"Died on \",\r\n      stopPoint,\r\n      \"retrying from instruction\",\r\n      instructions[stopPoint],\r\n      \"instructions length is\",\r\n      instructions.length\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = \"singleGossip\",\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = [];\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach((instruction) => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map((s) => s.publicKey)\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n\r\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  let breakEarlyObject = { breakEarly: false, i: 0 };\r\n  console.log(\r\n    \"Signed txns length\",\r\n    signedTxns.length,\r\n    \"vs handed in length\",\r\n    instructionSet.length\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    signedTxnPromise\r\n      .then(({ txid, slot }) => {\r\n        successCallback(txid, i);\r\n      })\r\n      .catch((reason) => {\r\n        // @ts-ignore\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          breakEarlyObject.breakEarly = true;\r\n          breakEarlyObject.i = i;\r\n        }\r\n      });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise;\r\n      } catch (e) {\r\n        console.log(\"Caught failure\", e);\r\n        if (breakEarlyObject.breakEarly) {\r\n          console.log(\"Died on \", breakEarlyObject.i);\r\n          // Return the txn we failed on by index\r\n          return {\r\n            number: breakEarlyObject.i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    await Promise.all(pendingTxns);\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach((instruction) => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map((s) => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map((s) => s.publicKey)\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = \"singleGossip\",\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach((instruction) => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map((s) => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map((s) => s.publicKey)\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 40000;\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    }\r\n  );\r\n\r\n  console.log(\"Started awaiting confirmation for\", txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(5000);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      \"recent\",\r\n      true\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error(\"Transaction failed: Custom instruction error\");\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error(\"Timeout Error caught\", err);\r\n    if (err.timeout) {\r\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, \"single\")\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith(\"Program log: \")) {\r\n            throw new Error(\r\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment\r\n): Promise<any> {\r\n  // @ts-ignore\r\n  // transaction.recentBlockhash = await connection._recentBlockhash(\r\n  //   // @ts-ignore\r\n  //   connection._disableBlockhashCaching\r\n  // );\r\n  //const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  /*   const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString(\"base64\");\r\n  const config: any = { encoding: \"base64\", commitment };\r\n  const args = [encodedTransaction, config]; */\r\n  // @ts-ignore\r\n  /*   const res = await connection._rpcRequest(\"simulateTransaction\", args);\r\n  if (res.error) {\r\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\r\n  }\r\n  return res.result; */\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(5000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  /* if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log(\"Returning status\", status); */\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.4),\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: 0,\r\n      marginBottom: theme.spacing(0.5),\r\n      height: theme.spacing(3.5),\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { CandyMachine } from \"./candy-machine\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport {\r\n  findGatewayToken,\r\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\r\n  onGatewayTokenChange,\r\n  removeAccountChangeListener,\r\n} from \"@identity.com/solana-gateway-ts\";\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(#7fff2f 0%, #2fb62f 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  opacity: 1;\r\n  -moz-transition: all 0.2s ease-in-out;\r\n  -webkit-transition: all 0.2s ease-in-out;\r\n  -ms-transition: all 0.2s ease-in-out;\r\n  -o-transition: all 0.2s ease-in-out;\r\n  transition: all 0.2s ease-in-out;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  rpcUrl,\r\n  setIsMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachine;\r\n  isMinting: boolean;\r\n  setIsMinting: (val: boolean) => void;\r\n  isActive: boolean;\r\n  rpcUrl: string;\r\n}) => {\r\n  const wallet = useWallet();\r\n  const connection = useConnection();\r\n  const [verified, setVerified] = useState(false);\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return \"SOLD OUT\";\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    }\r\n\r\n    return \"MINT\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const mint = async () => {\r\n      await removeAccountChangeListener(\r\n        connection.connection,\r\n        webSocketSubscriptionId\r\n      );\r\n      await onMint();\r\n\r\n      setClicked(false);\r\n      setVerified(false);\r\n    };\r\n    if (verified && clicked) {\r\n      mint();\r\n    }\r\n  }, [\r\n    verified,\r\n    clicked,\r\n    connection.connection,\r\n    onMint,\r\n    webSocketSubscriptionId,\r\n  ]);\r\n\r\n  const previousGatewayStatus = usePrevious(gatewayStatus);\r\n  useEffect(() => {\r\n    const fromStates = [\r\n      GatewayStatus.NOT_REQUESTED,\r\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\r\n    ];\r\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\r\n    if (\r\n      fromStates.find((state) => previousGatewayStatus === state) &&\r\n      !invalidToStates.find((state) => gatewayStatus === state)\r\n    ) {\r\n      setIsMinting(true);\r\n    }\r\n    console.log(\"change: \", gatewayStatus);\r\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={isMinting || !isActive}\r\n      onClick={async () => {\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          const network =\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\r\n          if (network === \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\") {\r\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n              await onMint();\r\n            } else {\r\n              // setIsMinting(true);\r\n              await requestGatewayToken();\r\n              console.log(\"after: \", gatewayStatus);\r\n            }\r\n          } else if (\r\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\r\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\r\n          ) {\r\n            setClicked(true);\r\n            const gatewayToken = await findGatewayToken(\r\n              connection.connection,\r\n              wallet.publicKey!,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork\r\n            );\r\n\r\n            if (gatewayToken?.isValid()) {\r\n              await onMint();\r\n            } else {\r\n              let endpoint = rpcUrl;\r\n              if (endpoint.endsWith(\"/\")) endpoint = endpoint.slice(0, -1);\r\n              if (!endpoint.startsWith(\"https\"))\r\n                endpoint = \"https\" + endpoint.slice(4);\r\n\r\n              window.open(\r\n                `https://verify.encore.fans/?endpoint=${endpoint}&gkNetwork=${network}`,\r\n                \"_blank\"\r\n              );\r\n\r\n              const gatewayTokenAddress =\r\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\r\n                  wallet.publicKey!,\r\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\r\n                );\r\n\r\n              setWebSocketSubscriptionId(\r\n                onGatewayTokenChange(\r\n                  connection.connection,\r\n                  gatewayTokenAddress,\r\n                  () => setVerified(true),\r\n                  \"confirmed\"\r\n                )\r\n              );\r\n            }\r\n          } else {\r\n            setClicked(false);\r\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import styled from \"styled-components\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nexport const Minus = styled.button`\r\n  width: 35px;\r\n  height: 35px;\r\n  font-size: 1.3em;\r\n  font-weight: bold;\r\n  line-height: 0.5px;\r\n  color: var(--main-text-color);\r\n  background: linear-gradient(#7fff2f 0%, #2fb62f 100%);\r\n  border: 0;\r\n  border-radius: 50%;\r\n  vertical-align: middle;\r\n  opacity: 1;\r\n  -moz-transition: all 0.2s ease-in-out;\r\n  -webkit-transition: all 0.2s ease-in-out;\r\n  -ms-transition: all 0.2s ease-in-out;\r\n  -o-transition: all 0.2s ease-in-out;\r\n  transition: all 0.2s ease-in-out;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  :not(disabled) {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const Plus = styled(Minus)`\r\n  margin-left: 0;\r\n`;\r\n\r\nexport const NumericField = styled.input`\r\n  font-size: 1.3em !important;\r\n  padding: 4px;\r\n  max-width: 100%;\r\n  text-align: center;\r\n  color: var(--main-text-color);\r\n  background-color: var(--main-text-color);\r\n  line-height: 1;\r\n  border-radius: 8px;\r\n  border: none;\r\n  transition: all 0.4s ease;\r\n  :hover,\r\n  :focus {\r\n    box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 40%),\r\n      0px 6px 10px 0px rgb(0 0 0 / 34%), 0px 1px 18px 0px rgb(0 0 0 / 32%);\r\n  }\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n`;\r\n\r\nexport const NFTcounter = ({\r\n  remainingNFTs,\r\n  setTotalCost,\r\n  setMintCount,\r\n  price,\r\n}: {\r\n  remainingNFTs: number;\r\n  setTotalCost: any;\r\n  setMintCount: any;\r\n  price: number;\r\n}) => {\r\n  const [mintCount, setCount] = useState(1);\r\n\r\n  function incrementValue() {\r\n    var numericField = document.querySelector(\".mint-qty\") as HTMLInputElement;\r\n    if (numericField) {\r\n      var value = parseInt(numericField.value);\r\n      if (!isNaN(value) && value < remainingNFTs) {\r\n        value++;\r\n        numericField.value = \"\" + value;\r\n        updateAmounts(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  function decrementValue() {\r\n    var numericField = document.querySelector(\".mint-qty\") as HTMLInputElement;\r\n    if (numericField) {\r\n      var value = parseInt(numericField.value);\r\n      if (!isNaN(value) && value > 1) {\r\n        value--;\r\n        numericField.value = \"\" + value;\r\n        updateAmounts(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  function updateMintCount(target: any) {\r\n    var value = parseInt(target.value);\r\n    if (!isNaN(value)) {\r\n      if (value > remainingNFTs) {\r\n        value = remainingNFTs;\r\n        target.value = \"\" + value;\r\n      } else if (value < 1) {\r\n        value = 1;\r\n        target.value = \"\" + value;\r\n      }\r\n      updateAmounts(value);\r\n    }\r\n  }\r\n\r\n  function updateAmounts(qty: number) {\r\n    setCount(qty);\r\n    setMintCount(qty);\r\n    setTotalCost(Math.round(qty * (price + 0.012) * 1000) / 1000); // 0.012 = approx of account creation fees\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={4} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <Minus onClick={() => decrementValue()}>-</Minus>\r\n      </Grid>\r\n      <Grid item xs={4} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <NumericField\r\n          type=\"number\"\r\n          className=\"mint-qty\"\r\n          step={1}\r\n          min={1}\r\n          max={10}\r\n          value={mintCount}\r\n          onChange={(e) => updateMintCount(e.target as any)}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={4} style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <Plus onClick={() => incrementValue()}>+</Plus>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { useEffect, useMemo, useState, useCallback } from \"react\";\r\nimport confetti from \"canvas-confetti\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { WalletMultiButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport styled from \"styled-components\";\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\nimport { Container, DialogContent, Grow, Snackbar } from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport { DialogTitle } from \"@material-ui/core\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Connection, programs } from \"@metaplex/js\";\r\nimport { PublicKey, Transaction } from \"@solana/web3.js\";\r\nimport { useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachine,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  mintMultipleToken,\r\n} from \"./candy-machine\";\r\nimport { AlertState, toDate, formatNumber, getAtaForMint } from \"./utils\";\r\nimport ImageList from \"@material-ui/core/ImageList\";\r\nimport ImageListItem from \"@material-ui/core/ImageListItem\";\r\nimport { MintCountdown } from \"./MintCountdown\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport { sendTransaction } from \"./connection\";\r\nimport { NFTcounter } from \"./NFTcounter\";\r\n\r\nimport { Swiper, SwiperSlide } from \"swiper/react/swiper-react\";\r\nimport \"swiper/swiper.min.css\";\r\nimport \"swiper/modules/pagination/pagination.min.css\";\r\nimport \"swiper/swiper-bundle.min.css\";\r\nimport \"swiper/swiper-bundle.css\";\r\nimport \"swiper/swiper.scss\";\r\n\r\nimport { Pagination, Navigation } from \"swiper\";\r\nimport \"./Home.css\";\r\nimport { getDerivationPath } from \"@solana/wallet-adapter-ledger\";\r\nimport { async } from \"q\";\r\nimport axios from \"axios\";\r\nimport { upperCase } from \"lodash\";\r\n\r\n//const confetti = require(\"canvas-confetti\");\r\nconst {\r\n  metadata: { Metadata },\r\n} = programs;\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(#7fff2f 0%, #2fb62f 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  opacity: 1;\r\n  -moz-transition: all 0.2s ease-in-out;\r\n  -webkit-transition: all 0.2s ease-in-out;\r\n  -ms-transition: all 0.2s ease-in-out;\r\n  -o-transition: all 0.2s ease-in-out;\r\n  transition: all 0.2s ease-in-out;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\r\n  const [isSoldOut, setIsSoldOut] = useState(false);\r\n  const [nftsMintedByOwner, setNFTs] = useState<any>([]);\r\n  const [isMinting, setIsMinting] = useState(false);\r\n  const [mintCount, setMintCount] = useState(1);\r\n  const [totalCost, setTotalCost] = useState(0);\r\n  const [price, setPrice] = useState(0);\r\n  const [balance, setBalance] = useState(0);\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [loading, setLoading] = useState(false);\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n  const [payWithSplToken, setPayWithSplToken] = useState(false);\r\n  const solFeesEstimation = 0.012;\r\n  const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\r\n  const [whitelistPrice, setWhitelistPrice] = useState(0);\r\n  const [whitelistEnabled, setWhitelistEnabled] = useState(false);\r\n  const [isBurnToken, setIsBurnToken] = useState(false);\r\n  const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\r\n  const [isEnded, setIsEnded] = useState(false);\r\n  const [isWLOnly, setIsWLOnly] = useState(false);\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(async () => {\r\n    if (!anchorWallet) {\r\n      return;\r\n    }\r\n\r\n    if (props.candyMachineId) {\r\n      try {\r\n        const cndy = await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection\r\n        );\r\n        console.log(getCountdownDate(cndy));\r\n        let active =\r\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\r\n        let presale = false;\r\n        let price = formatNumber.asNumber(cndy.state.price);\r\n        setPrice(price!);\r\n        let cost = mintCount * (price! + solFeesEstimation);\r\n        setTotalCost(cost);\r\n        if (wallet?.publicKey) {\r\n          const balance = await props.connection.getBalance(wallet.publicKey);\r\n          setBalance(balance / LAMPORTS_PER_SOL);\r\n        }\r\n\r\n        // datetime to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.date) {\r\n          setEndDate(toDate(cndy.state.endSettings.number));\r\n          if (\r\n            cndy.state.endSettings.number.toNumber() <\r\n            new Date().getTime() / 1000\r\n          ) {\r\n            active = false;\r\n          }\r\n        }\r\n        // amount to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.amount) {\r\n          let limit = Math.min(\r\n            cndy.state.endSettings.number.toNumber(),\r\n            cndy.state.itemsAvailable\r\n          );\r\n          if (cndy.state.itemsRedeemed < limit) {\r\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n          } else {\r\n            setItemsRemaining(0);\r\n            cndy.state.isSoldOut = true;\r\n          }\r\n        } else {\r\n          setItemsRemaining(cndy.state.itemsRemaining);\r\n        }\r\n\r\n        if (cndy.state.isSoldOut) {\r\n          active = false;\r\n        }\r\n\r\n        setIsActive((cndy.state.isActive = active));\r\n        //setIsPresale((cndy.state.isPresale = presale));\r\n        setCandyMachine(cndy);\r\n      } catch (e) {\r\n        console.log(\"There was a problem fetching Candy Machine state\");\r\n        console.log(e);\r\n      }\r\n    }\r\n    collectNftsFromWallet();\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n\r\n  function getSum(array: any) {\r\n    let sum = 0;\r\n    array.map((score: number) => (sum += score));\r\n    return sum;\r\n  }\r\n\r\n  const analyseAttributes = async (attributes: any) => {\r\n    let traits = [\"Background\", \"Parrots\", \"Monkeys\", \"Glasses\", \"Headscarf\"];\r\n    let scores: any = {};\r\n    let category = \"\";\r\n    await attributes.map((nft: any) => {\r\n      if (traits.includes(nft.trait_type)) {\r\n        if (nft.value === \"blank\") {\r\n          scores[nft.trait_type] = 0;\r\n        } else if (nft.value.includes(\"R\")) {\r\n          scores[nft.trait_type] = 2;\r\n        } else if (nft.value.includes(\"L\")) {\r\n          scores[nft.trait_type] = 3;\r\n        } else {\r\n          scores[nft.trait_type] = 1;\r\n        }\r\n      }\r\n    });\r\n    //console.log(scores);\r\n    let sum = getSum(Object.values(scores));\r\n    if (sum === 13) {\r\n      category = \"legendary\";\r\n    } else if (sum === 12 && scores[\"Parrots\"] === 3) {\r\n      category = \"veryRare\";\r\n    } else if (sum === 12 && scores[\"Headscarf\"] === 3) {\r\n      category = \"veryRare\";\r\n    } else if (sum === 11 && scores[\"Background\"] === 1) {\r\n      category = \"rare\";\r\n    } else if (sum === 11 && scores[\"Headscarf\"] >= 2) {\r\n      category = \"rare\";\r\n    } else if (\r\n      scores[\"Parrots\"] === 3 &&\r\n      scores[\"Headscarf\"] == 3 &&\r\n      getSum([scores[\"Background\"], scores[\"Monkeys\"], scores[\"Glasses\"]]) === 6\r\n    ) {\r\n      category = \"rare\";\r\n    } else if (scores[\"Glasses\"] == 3 && sum - scores[\"Glasses\"] === 12) {\r\n      category = \"rare\";\r\n    } else if (\r\n      scores[\"Parrots\"] === 0 &&\r\n      scores[\"Monkeys\"] === 0 &&\r\n      sum === 6\r\n    ) {\r\n      category = \"rare\";\r\n    } else if (\r\n      scores[\"Parrots\"] === 3 &&\r\n      scores[\"Headscarf\"] == 3 &&\r\n      getSum([scores[\"Background\"], scores[\"Monkeys\"], scores[\"Glasses\"]]) === 4\r\n    ) {\r\n      category = \"rare\";\r\n    } else if (sum === 11 && scores[\"Headscarf\"] === 1) {\r\n      category = \"above average\";\r\n    } else if (scores[\"Glasses\"] === 3 && sum - scores[\"Glasses\"] === 7) {\r\n      category = \"above average\";\r\n    } else if (scores[\"Headscarf\"] === 3 && sum - scores[\"Headscarf\"] === 7) {\r\n      category = \"above average\";\r\n    } else if (\r\n      sum === 10 &&\r\n      scores[\"Headscarf\"] >= 2 &&\r\n      scores[\"Glasses\"] >= 2\r\n    ) {\r\n      category = \"above average\";\r\n    } else if (sum === 8 && scores[\"Monkeys\"] === 0) {\r\n      category = \"above average\";\r\n    } else if (sum === 7 && scores[\"Parrots\"] === 0) {\r\n      category = \"above average\";\r\n    } else if (sum === 9 || sum === 10 || sum) {\r\n      category = \"average\";\r\n    } else if (sum === 7 || sum === 8) {\r\n      category = \"average\";\r\n    } else if (sum === 6) {\r\n      category = \"average\";\r\n    } else if (sum === 5) {\r\n      category = \"average\";\r\n    } else if (sum === 4) {\r\n      category = \"average\";\r\n    } else if (sum === 3) {\r\n      category = \"average\";\r\n    }\r\n    return { scores, category };\r\n  };\r\n\r\n  const getNFTs = async (uri: any) => {\r\n    let response;\r\n    try {\r\n      response = await axios.get(uri);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    let rarity = await analyseAttributes(response?.data.attributes);\r\n    let image: string = response?.data.image;\r\n    return { image, rarity };\r\n  };\r\n\r\n  const collectNftsFromWallet = async () => {\r\n    const nftsmetadata = await Metadata.findDataByOwner(\r\n      props.connection,\r\n      anchorWallet!.publicKey\r\n    );\r\n    let NFTsfromCollection = Promise.all(\r\n      nftsmetadata\r\n        .filter(\r\n          (nft) =>\r\n            nft.data.name.includes(\"Treedom\") && nft.data.symbol == \"TDNFT\"\r\n        )\r\n        .map((nftData) => getNFTs(nftData.data.uri))\r\n    ).then((value) => {\r\n      return value;\r\n    });\r\n    setNFTs(await NFTsfromCollection);\r\n  };\r\n\r\n  function throwConfetti(quantity: any): void {\r\n    confetti({\r\n      particleCount: 400,\r\n      spread: 70,\r\n      origin: { y: 0.6 },\r\n    });\r\n\r\n    setTimeout(function () {\r\n      setAlertState({\r\n        open: true,\r\n        message: `Congratulations! Your ${quantity} mint(s) succeeded!`,\r\n        severity: \"success\",\r\n      });\r\n    }, 3000);\r\n    setTimeout(function () {\r\n      window.location.reload();\r\n    }, 6000);\r\n  }\r\n\r\n  function sleep(ms: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  async function mintMany(quantityString: number) {\r\n    if (wallet && candyMachine?.program && wallet.publicKey) {\r\n      const quantity = Number(quantityString);\r\n      const futureBalance = (balance || 0) - price * quantity;\r\n      const signedTransactions: any = await mintMultipleToken(\r\n        candyMachine,\r\n        wallet.publicKey,\r\n        quantity\r\n      );\r\n\r\n      const promiseArray = [];\r\n      console.log(signedTransactions);\r\n      for (let index = 0; index < signedTransactions.length; index++) {\r\n        const tx = signedTransactions[index];\r\n        promiseArray.push(\r\n          awaitTransactionSignatureConfirmation(\r\n            tx,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true\r\n          )\r\n        );\r\n      }\r\n      console.log(promiseArray);\r\n      const allTransactionsResult = await Promise.all(promiseArray);\r\n      let totalSuccess = 0;\r\n      let totalFailure = 0;\r\n      console.log(allTransactionsResult);\r\n      for (let index = 0; index < allTransactionsResult.length; index++) {\r\n        const transactionStatus = allTransactionsResult[index];\r\n        if (!transactionStatus?.err) {\r\n          totalSuccess += 1;\r\n        } else {\r\n          totalFailure += 1;\r\n        }\r\n      }\r\n      setLoading(true);\r\n      let retry = 0;\r\n      if (allTransactionsResult.length > 0) {\r\n        let newBalance =\r\n          (await props.connection.getBalance(wallet.publicKey)) /\r\n          LAMPORTS_PER_SOL;\r\n\r\n        while (newBalance > futureBalance && retry < 20) {\r\n          await sleep(2000);\r\n          newBalance =\r\n            (await props.connection.getBalance(wallet.publicKey)) /\r\n            LAMPORTS_PER_SOL;\r\n          retry++;\r\n          console.log(\r\n            \"Estimated balance (\" +\r\n              futureBalance +\r\n              \") not correct yet, wait a little bit and re-check. Current balance : \" +\r\n              newBalance +\r\n              \", Retry \" +\r\n              retry\r\n          );\r\n        }\r\n      }\r\n\r\n      await sleep(2000);\r\n      setLoading(false);\r\n\r\n      if (totalSuccess && retry < 20) {\r\n        throwConfetti(quantity);\r\n\r\n        // update front-end amounts\r\n      }\r\n\r\n      if (totalFailure || retry === 20) {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Some mints failed! (possibly ${totalFailure}) Wait a few minutes and check your wallet.`,\r\n          severity: \"error\",\r\n        });\r\n      }\r\n\r\n      if (totalFailure === 0 && totalSuccess === 0) {\r\n        setAlertState({\r\n          open: true,\r\n          message: `Mints manually cancelled.`,\r\n          severity: \"error\",\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const startMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      await mintMany(mintCount);\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction Timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      // setAlertState({\r\n      //   open: true,\r\n      //   message,\r\n      //   severity: \"error\",\r\n      // });\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      /*       if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      } */\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    /*     if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    } */\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [currentNFT, setCurrentNFT] = useState<any>();\r\n\r\n  /*const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n   function displayRarity(nft: any) {\r\n    setOpen(true);\r\n    setCurrentNFT(nft);\r\n  } */\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      await refreshCandyMachineState();\r\n    })();\r\n  }, [anchorWallet, props.candyMachineId, props.connection, balance]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet?.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  return (\r\n    <>\r\n      {/* <Dialog open={open} onClose={handleClose}>\r\n        <Paper>\r\n          <img src={currentNFT?.image} height=\"500px\" width=\"500px\" />\r\n        </Paper>\r\n      </Dialog> */}\r\n      <Container>\r\n        <Backdrop\r\n          open={loading}\r\n          style={{ position: \"absolute\", height: \"100%\", zIndex: \"4\" }}\r\n        >\r\n          <CircularProgress color=\"inherit\" />\r\n        </Backdrop>\r\n        <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\r\n          {wallet.connected && (\r\n            <>\r\n              <Paper\r\n                style={{\r\n                  padding: 24,\r\n                  backgroundColor: \"#151a1fa5\",\r\n                  borderRadius: 6,\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  marginBottom: \"20px\",\r\n                }}\r\n              >\r\n                <WalletMultiButton />\r\n                <Typography variant=\"body2\" style={{ marginLeft: \"20px\" }}>\r\n                  BALANCE: <b>{balance.toFixed(5)}</b> SOL\r\n                </Typography>\r\n              </Paper>\r\n              <Paper\r\n                style={{\r\n                  width: \"100%\",\r\n                  paddingTop: \"20px\",\r\n                  paddingBottom: \"10px\",\r\n                  marginBottom: \"20px\",\r\n                  backgroundColor: \"#151a1fa5\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <Typography\r\n                  variant=\"body2\"\r\n                  style={{\r\n                    textAlign: \"center\",\r\n                    marginBottom: \"20px\",\r\n                  }}\r\n                >\r\n                  MY NFTS FROM THE COLLECTION ({\" \"}\r\n                  {nftsMintedByOwner ? nftsMintedByOwner.length : 0} PCS )\r\n                </Typography>\r\n                <Container\r\n                  style={{\r\n                    width: \"100%\",\r\n                    maxHeight: \"400px\",\r\n                  }}\r\n                >\r\n                  <>\r\n                    <Swiper\r\n                      slidesPerView={1}\r\n                      spaceBetween={30}\r\n                      loop={true}\r\n                      pagination={{\r\n                        clickable: true,\r\n                      }}\r\n                      navigation={true}\r\n                      modules={[Pagination, Navigation]}\r\n                      className=\"mySwiper\"\r\n                    >\r\n                      {nftsMintedByOwner.map((nft: any) => (\r\n                        <SwiperSlide key={nft.image}>\r\n                          <Box className=\"imageContainer\">\r\n                            <img\r\n                              src={nft.image}\r\n                              width=\"70%\"\r\n                              height=\"auto\"\r\n                              loading=\"lazy\"\r\n                              style={{\r\n                                borderRadius: \"20px\",\r\n                                display: \"block\",\r\n                              }}\r\n                            />\r\n                            <Paper className=\"rarity\">\r\n                              <Box\r\n                                style={{\r\n                                  padding: \"20px 30px 20px 30px\",\r\n                                  display: \"flex\",\r\n                                  flexDirection: \"column\",\r\n                                  justifyContent: \"space-between\",\r\n                                  width: \"100%\",\r\n                                }}\r\n                              >\r\n                                <Typography\r\n                                  style={{\r\n                                    textTransform: \"uppercase\",\r\n                                    marginBottom: \"10px\",\r\n                                    borderBottom: \"1px solid whitesmoke\",\r\n                                  }}\r\n                                  variant=\"h6\"\r\n                                  color=\"textPrimary\"\r\n                                >\r\n                                  {nft.rarity.category}\r\n                                </Typography>\r\n                                <Typography\r\n                                  variant=\"body2\"\r\n                                  color=\"textSecondary\"\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                  }}\r\n                                >\r\n                                  BACKGROUND:\r\n                                  <b\r\n                                    style={{\r\n                                      fontSize: \"1.2rem\",\r\n                                      color: \"white\",\r\n                                    }}\r\n                                  >\r\n                                    {nft.rarity.scores[\"Background\"]} / 2\r\n                                  </b>\r\n                                </Typography>\r\n                                <Typography\r\n                                  variant=\"body2\"\r\n                                  color=\"textSecondary\"\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                  }}\r\n                                >\r\n                                  HEADSCARF:{\" \"}\r\n                                  <b\r\n                                    style={{\r\n                                      fontSize: \"1.2rem\",\r\n                                      color: \"white\",\r\n                                    }}\r\n                                  >\r\n                                    {nft.rarity.scores[\"Headscarf\"]} / 3\r\n                                  </b>\r\n                                </Typography>\r\n                                <Typography\r\n                                  variant=\"body2\"\r\n                                  color=\"textSecondary\"\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                  }}\r\n                                >\r\n                                  GLASSES:{\" \"}\r\n                                  <b\r\n                                    style={{\r\n                                      fontSize: \"1.2rem\",\r\n                                      color: \"white\",\r\n                                    }}\r\n                                  >\r\n                                    {nft.rarity.scores[\"Glasses\"]} / 3\r\n                                  </b>\r\n                                </Typography>\r\n                                <Typography\r\n                                  variant=\"body2\"\r\n                                  color=\"textSecondary\"\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                  }}\r\n                                >\r\n                                  MONKEY:{\" \"}\r\n                                  <b\r\n                                    style={{\r\n                                      fontSize: \"1.2rem\",\r\n                                      color: \"white\",\r\n                                    }}\r\n                                  >\r\n                                    {nft.rarity.scores[\"Monkeys\"]} / 2\r\n                                  </b>\r\n                                </Typography>\r\n                                <Typography\r\n                                  variant=\"body2\"\r\n                                  color=\"textSecondary\"\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                  }}\r\n                                >\r\n                                  PARROT:{\" \"}\r\n                                  <b\r\n                                    style={{\r\n                                      fontSize: \"1.2rem\",\r\n                                      color: \"white\",\r\n                                    }}\r\n                                  >\r\n                                    {nft.rarity.scores[\"Parrots\"]} / 3\r\n                                  </b>\r\n                                </Typography>\r\n                              </Box>\r\n                            </Paper>\r\n                          </Box>\r\n                        </SwiperSlide>\r\n                      ))}\r\n                    </Swiper>\r\n                  </>\r\n                </Container>\r\n              </Paper>\r\n            </>\r\n          )}\r\n          <Paper\r\n            style={{\r\n              padding: 20,\r\n              paddingBottom: 20,\r\n              backgroundColor: \"#151a1fa5\",\r\n              borderRadius: 6,\r\n            }}\r\n          >\r\n            {!wallet.connected ? (\r\n              <ConnectButton>Connect Wallet</ConnectButton>\r\n            ) : (\r\n              <>\r\n                {candyMachine && (\r\n                  <>\r\n                    <Grid\r\n                      container\r\n                      direction=\"row\"\r\n                      justifyContent=\"center\"\r\n                      wrap=\"nowrap\"\r\n                    >\r\n                      {!candyMachine?.state?.isSoldOut && isActive && (\r\n                        <Grid item xs={4}>\r\n                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n                            {isWhitelistUser && discountPrice\r\n                              ? \"Discount Price\"\r\n                              : \"*Price\"}\r\n                          </Typography>\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textPrimary\"\r\n                            style={{ fontWeight: \"bold\" }}\r\n                          >\r\n                            {isWhitelistUser && discountPrice\r\n                              ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                              : `◎ ${totalCost}`}\r\n                          </Typography>\r\n                        </Grid>\r\n                      )}\r\n                      {isActive && (\r\n                        <Grid item xs={4}>\r\n                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n                            Remaining\r\n                          </Typography>\r\n                          <Typography\r\n                            variant=\"h6\"\r\n                            color=\"textPrimary\"\r\n                            style={{\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            {`${itemsRemaining}`} /{\" \"}\r\n                            {candyMachine.state.itemsAvailable}\r\n                          </Typography>\r\n                        </Grid>\r\n                      )}\r\n                      <Grid item xs={4}>\r\n                        {isActive &&\r\n                        endDate &&\r\n                        Date.now() < endDate.getTime() ? (\r\n                          <>\r\n                            <MintCountdown\r\n                              key=\"endSettings\"\r\n                              date={getCountdownDate(candyMachine)}\r\n                              style={{ justifyContent: \"flex-end\" }}\r\n                              status=\"COMPLETED\"\r\n                              onComplete={toggleMintButton}\r\n                            />\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: \"bold\" }}\r\n                            >\r\n                              TO END OF MINT\r\n                            </Typography>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <MintCountdown\r\n                              key=\"goLive\"\r\n                              date={getCountdownDate(candyMachine)}\r\n                              style={{ justifyContent: \"flex-end\" }}\r\n                              status={\r\n                                candyMachine?.state?.isSoldOut ||\r\n                                (endDate && Date.now() > endDate.getTime())\r\n                                  ? \"COMPLETED\"\r\n                                  : isPresale\r\n                                  ? \"PRESALE\"\r\n                                  : \"LIVE\"\r\n                              }\r\n                              onComplete={toggleMintButton}\r\n                            />\r\n                            {isPresale &&\r\n                              candyMachine.state.goLiveDate &&\r\n                              candyMachine.state.goLiveDate.toNumber() >\r\n                                new Date().getTime() / 1000 && (\r\n                                <Typography\r\n                                  variant=\"caption\"\r\n                                  align=\"center\"\r\n                                  display=\"block\"\r\n                                  style={{ fontWeight: \"bold\" }}\r\n                                >\r\n                                  UNTIL PUBLIC MINT\r\n                                </Typography>\r\n                              )}\r\n                          </>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                    {!candyMachine?.state?.isSoldOut && isActive && (\r\n                      <Grid container>\r\n                        <Grid item xs={12}>\r\n                          <Typography\r\n                            variant=\"caption\"\r\n                            style={{ color: \"grey\" }}\r\n                          >\r\n                            {\"*Estimated total cost - fees included\"}\r\n                          </Typography>\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                  </>\r\n                )}\r\n                <Grid container spacing={5}>\r\n                  {!candyMachine?.state?.isSoldOut && isActive ? (\r\n                    <>\r\n                      <Grid item xs={5}>\r\n                        <Typography\r\n                          variant=\"body2\"\r\n                          color=\"textSecondary\"\r\n                          style={{ paddingBottom: \"5px\" }}\r\n                        >\r\n                          {\"Amount\"}\r\n                        </Typography>\r\n                        <NFTcounter\r\n                          remainingNFTs={itemsRemaining!}\r\n                          price={price}\r\n                          setMintCount={setMintCount}\r\n                          setTotalCost={setTotalCost}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={7}>\r\n                        <MintContainer>\r\n                          {candyMachine?.state.isActive &&\r\n                          candyMachine?.state.gatekeeper &&\r\n                          wallet.publicKey &&\r\n                          wallet.signTransaction ? (\r\n                            <GatewayProvider\r\n                              wallet={{\r\n                                publicKey:\r\n                                  wallet.publicKey ||\r\n                                  new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                                //@ts-ignore\r\n                                signTransaction: wallet.signTransaction,\r\n                              }}\r\n                              // // Replace with following when added\r\n                              // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                              gatekeeperNetwork={\r\n                                candyMachine?.state?.gatekeeper\r\n                                  ?.gatekeeperNetwork\r\n                              } // This is the ignite (captcha) network\r\n                              /// Don't need this for mainnet\r\n                              clusterUrl={rpcUrl}\r\n                              options={{ autoShowModal: false }}\r\n                            >\r\n                              <MintButton\r\n                                candyMachine={candyMachine}\r\n                                isMinting={isUserMinting}\r\n                                setIsMinting={(val) => setIsUserMinting(val)}\r\n                                onMint={startMint}\r\n                                isActive={\r\n                                  isActive || (isPresale && isWhitelistUser)\r\n                                }\r\n                                rpcUrl={rpcUrl}\r\n                              />\r\n                            </GatewayProvider>\r\n                          ) : (\r\n                            <MintButton\r\n                              candyMachine={candyMachine}\r\n                              isMinting={isUserMinting}\r\n                              setIsMinting={(val) => setIsUserMinting(val)}\r\n                              onMint={startMint}\r\n                              isActive={\r\n                                isActive || (isPresale && isWhitelistUser)\r\n                              }\r\n                              rpcUrl={rpcUrl}\r\n                            />\r\n                          )}\r\n                        </MintContainer>\r\n                      </Grid>\r\n                    </>\r\n                  ) : (\r\n                    <Grid item xs={12}>\r\n                      <MintContainer>\r\n                        {candyMachine?.state.isActive &&\r\n                        candyMachine?.state.gatekeeper &&\r\n                        wallet.publicKey &&\r\n                        wallet.signTransaction ? (\r\n                          <GatewayProvider\r\n                            wallet={{\r\n                              publicKey:\r\n                                wallet.publicKey ||\r\n                                new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                              //@ts-ignore\r\n                              signTransaction: wallet.signTransaction,\r\n                            }}\r\n                            // // Replace with following when added\r\n                            // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\r\n                            gatekeeperNetwork={\r\n                              candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                            } // This is the ignite (captcha) network\r\n                            /// Don't need this for mainnet\r\n                            clusterUrl={rpcUrl}\r\n                            options={{ autoShowModal: false }}\r\n                          >\r\n                            <MintButton\r\n                              candyMachine={candyMachine}\r\n                              isMinting={isUserMinting}\r\n                              setIsMinting={(val) => setIsUserMinting(val)}\r\n                              onMint={startMint}\r\n                              isActive={\r\n                                isActive || (isPresale && isWhitelistUser)\r\n                              }\r\n                              rpcUrl={rpcUrl}\r\n                            />\r\n                          </GatewayProvider>\r\n                        ) : (\r\n                          <MintButton\r\n                            candyMachine={candyMachine}\r\n                            isMinting={isUserMinting}\r\n                            setIsMinting={(val) => setIsUserMinting(val)}\r\n                            onMint={startMint}\r\n                            isActive={\r\n                              isActive || (isPresale && isWhitelistUser)\r\n                            }\r\n                            rpcUrl={rpcUrl}\r\n                          />\r\n                        )}\r\n                      </MintContainer>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </>\r\n            )}\r\n            {/* <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 7, color: \"grey\" }}\r\n          >\r\n            Powered by METAPLEX\r\n          </Typography> */}\r\n          </Paper>\r\n        </Container>\r\n\r\n        <Snackbar\r\n          open={alertState.open}\r\n          autoHideDuration={6000}\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n        >\r\n          <Alert\r\n            onClose={() => setAlertState({ ...alertState, open: false })}\r\n            severity={alertState.severity}\r\n          >\r\n            {alertState.message}\r\n          </Alert>\r\n        </Snackbar>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (candyMachine: CandyMachine): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n  return toDate(\r\n    candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : undefined\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export default __webpack_public_path__ + \"static/media/treedom.f44ce920.png\";","export default __webpack_public_path__ + \"static/media/treedom.81ffb9ed.gif\";","export default __webpack_public_path__ + \"static/media/leaf.339b698f.png\";","import \"./App.css\";\r\nimport { useMemo } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Home from \"./Home\";\r\n\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\nimport { ThemeProvider, createTheme, Paper } from \"@material-ui/core\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Image from \"material-ui-image\";\r\nimport logo from \"./assets/treedom.png\";\r\nimport gif from \"./assets/treedom.gif\";\r\nimport leafbg from \"./assets/leaf.png\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    const candyMachineId = new anchor.web3.PublicKey(\r\n      process.env.REACT_APP_CANDY_MACHINE_ID!\r\n    );\r\n\r\n    return candyMachineId;\r\n  } catch (e) {\r\n    console.log(\"Failed to construct CandyMachineId\", e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl(\"devnet\")\r\n);\r\n\r\nconst txTimeoutInMilliseconds = 30000;\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    []\r\n  );\r\n\r\n  function Copyright() {\r\n    return (\r\n      <Typography variant=\"body2\" style={{ textAlign: \"center\" }}>\r\n        {\"Copyright © \"}\r\n        <Typography\r\n          variant=\"body2\"\r\n          style={{ fontWeight: \"bold\" }}\r\n          display=\"inline\"\r\n        >\r\n          Treedom\r\n        </Typography>\r\n        {\" \" + new Date().getFullYear()}\r\n        {\".\"}\r\n      </Typography>\r\n    );\r\n  }\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          minHeight: \"100vh\",\r\n        }}\r\n      >\r\n        <Grid\r\n          container\r\n          justifyContent=\"center\"\r\n          style={{\r\n            flex: 1,\r\n            display: \"flex\",\r\n          }}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={6}\r\n            style={{ display: \"flex\", alignItems: \"center\" }}\r\n          >\r\n            <Grid>\r\n              <Grid item lg={12} md={12}>\r\n                <Image\r\n                  color=\"transparent\"\r\n                  className=\"logo\"\r\n                  aspectRatio={1}\r\n                  style={{\r\n                    paddingTop: \"0px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                  src={logo}\r\n                />\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                lg={12}\r\n                md={12}\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <Typography\r\n                  style={{\r\n                    color: \"grey\",\r\n                    width: \"50%\",\r\n                    justifyContent: \"center\",\r\n                    marginLeft: \"10%\",\r\n                  }}\r\n                  variant=\"h6\"\r\n                  align=\"left\"\r\n                >\r\n                  Unique way of tree adoption\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item lg={12} md={12}>\r\n                <Image\r\n                  style={{\r\n                    marginTop: \"20px\",\r\n                    paddingTop: \"0px\",\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                  }}\r\n                  color=\"transparent\"\r\n                  className=\"gif\"\r\n                  aspectRatio={1}\r\n                  src={gif}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            md={6}\r\n            style={{\r\n              display: \"flex\",\r\n            }}\r\n          >\r\n            <Paper\r\n              style={{\r\n                width: \"100%\",\r\n                backgroundColor: \"transparent\",\r\n                backgroundImage: `url(${leafbg})`,\r\n                backgroundSize: \"cover\",\r\n              }}\r\n            >\r\n              <Box\r\n                style={{\r\n                  height: \"100%\",\r\n                  width: \"100%\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <ConnectionProvider endpoint={endpoint}>\r\n                  <WalletProvider wallets={wallets} autoConnect>\r\n                    <WalletDialogProvider>\r\n                      <Home\r\n                        candyMachineId={candyMachineId}\r\n                        connection={connection}\r\n                        txTimeout={txTimeoutInMilliseconds}\r\n                        rpcHost={rpcHost}\r\n                      />\r\n                    </WalletDialogProvider>\r\n                  </WalletProvider>\r\n                </ConnectionProvider>\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n        <Box className=\"divider\"></Box>\r\n        <Box\r\n          component=\"footer\"\r\n          sx={{\r\n            py: 1,\r\n            px: 2,\r\n            mt: \"auto\",\r\n          }}\r\n          style={{ backgroundColor: \"#151A1F\", color: \"grey\" }}\r\n        >\r\n          <Container maxWidth=\"sm\">\r\n            <Copyright />\r\n          </Container>\r\n        </Box>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}